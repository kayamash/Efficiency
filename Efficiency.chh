#ifndef EFFICIENCY_CHH
#define EFFICIENCY_CHH

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <TH1.h>
#include <TH2.h>
#include <TCanvas.h>
#include <stdio.h>
#include <math.h>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sys/stat.h>
#include <sys/types.h>
#include <string>
#include <sstream>
#include <TF1.h>
#include <TTree.h>
#include <TStyle.h>
#include <TText.h>
#include <TGraphErrors.h>
#include <TLegend.h>
#include <vector>
#include <TMath.h>
#include <TBranch.h>
#include <TObject.h>
#include <TChain.h>

class Efficiency
 {
  //variable
  private:
  //for tree
  TTree *tChain;
  Double_t m_toff_pt;
  Double_t m_toff_eta;
  Double_t m_toff_exteta;
  Double_t m_toff_extinneta;
  Double_t m_toff_phi;
  Double_t m_toff_extphi;
  Double_t m_toff_extinnphi;
  Double_t m_tag_charge;
  Double_t m_tag_d0,m_tag_z0;
  Double_t m_probe_segment_etaIndex[10];
  Double_t m_poff_pt;
  Double_t m_poff_eta;
  Double_t m_poff_exteta;
  Double_t m_poff_extinneta;
  Double_t m_poff_phi;
  Double_t m_poff_extphi;
  Double_t m_poff_extinnphi;
  Double_t m_poff_charge;
  Double_t m_poff_d0;
  Double_t m_poff_z0;
  Double_t m_tp_extdR;
  Double_t m_tp_dR;
  Double_t m_tL1_pt;
  Double_t m_tL1_eta;
  Double_t m_tL1_phi;
  Double_t m_sumReqdRL1;
  Double_t m_tSA_pt;
  Double_t m_tSA_eta;
  Double_t m_tSA_phi;
  Double_t m_tCB_pt;
  Double_t m_tCB_eta;
  Double_t m_tCB_phi;
  Double_t m_tEF_pt;
  Double_t m_tEF_eta;
  Double_t m_tEF_phi;
  Double_t m_sumReqdREF;

  std::vector<std::string> *m_mes_name;
  Int_t m_tag_proc;
  std::vector<Double_t> *m_pL1_pt;
  std::vector<Double_t> *m_pL1_eta;
  std::vector<Double_t> *m_pL1_phi;
  std::vector<Double_t> *m_pL1_dR;
  std::vector<Int_t> *m_pL1_pass;
  std::vector<Double_t> *m_pSA_pt;
  std::vector<Double_t> *m_pSA_eta;
  std::vector<Double_t> *m_pSA_phi;
  std::vector<Double_t> *m_pSA_dR;
  std::vector<Double_t> *m_pSA_sAddress;
  std::vector<Double_t> *m_pSA_phims;
  std::vector<float> *m_pSA_roiphi;
  std::vector<Int_t> *m_pSA_pass;
  std::vector<vector<float>> *m_pSA_rpcX;
  std::vector<vector<float>> *m_pSA_rpcY;
  std::vector<vector<float>> *m_pSA_mdtZ;
  std::vector<vector<float>> *m_pSA_mdtR;
  std::vector<vector<float>> *m_pSA_mdtPhi;
  std::vector<Double_t> *m_pCB_pt;
  std::vector<Double_t> *m_pCB_eta;
  std::vector<Double_t> *m_pCB_phi;
  std::vector<Double_t> *m_pCB_dR;
  std::vector<Int_t> *m_pCB_pass;
  std::vector<Double_t> *m_pEF_pt;
  std::vector<Double_t> *m_pEF_eta;
  std::vector<Double_t> *m_pEF_phi;
  std::vector<Double_t> *m_pEF_dR;
  std::vector<Int_t> *m_pEF_pass;
  std::vector<Int_t> *m_pEFTAG_pass;

  TBranch *b_mes_name;
  TBranch *b_tag_proc;
  TBranch *b_tag_pt;
  TBranch *b_tag_eta;
  TBranch *b_tag_exteta;
  TBranch *b_tag_extinneta;
  TBranch *b_tag_phi;
  TBranch *b_tag_extphi;
  TBranch *b_tag_extinnphi;
  TBranch *b_tag_charge;
  TBranch *b_tag_d0;
  TBranch *b_tag_z0;
  TBranch *b_probe_pt;
  TBranch *b_probe_eta;
  TBranch *b_probe_exteta;
  TBranch *b_probe_extinneta;
  TBranch *b_probe_phi;
  TBranch *b_probe_extphi;
  TBranch *b_probe_extinnphi;
  TBranch *b_probe_charge;
  TBranch *b_probe_d0;
  TBranch *b_probe_z0;
  TBranch *b_probe_segment_etaIndex;
  TBranch *b_tp_dR;
  TBranch *b_tp_extdR;
  TBranch *b_tL1_pt;
  TBranch *b_tL1_eta;
  TBranch *b_tL1_phi;
  TBranch *b_tSA_pt;
  TBranch *b_tSA_eta;
  TBranch *b_tSA_phi;
  TBranch *b_tCB_pt;
  TBranch *b_tCB_eta;
  TBranch *b_tCB_phi;
  TBranch *b_tEF_pt;
  TBranch *b_tEF_eta;
  TBranch *b_tEF_phi;
  TBranch *b_pL1_pt;
  TBranch *b_pL1_eta;
  TBranch *b_pL1_phi;
  TBranch *b_pL1_dR;;
  TBranch *b_pL1_pass;
  TBranch *b_sumReqdRL1;
  TBranch *b_pSA_pt;
  TBranch *b_pSA_eta;
  TBranch *b_pSA_phi;
  TBranch *b_pSA_dR;
  TBranch *b_pSA_sAddress;
  TBranch *b_pSA_phims;
  TBranch *b_pSA_roiphi;
  TBranch *b_pSA_pass;
  TBranch *b_pSA_rpcX;
  TBranch *b_pSA_rpcY;
  TBranch *b_pSA_mdtZ;
  TBranch *b_pSA_mdtR;
  TBranch *b_pSA_mdtPhi;
  TBranch *b_pCB_pt;
  TBranch *b_pCB_eta;
  TBranch *b_pCB_phi;
  TBranch *b_pCB_dR;
  TBranch *b_pCB_pass;
  TBranch *b_pEF_pt;
  TBranch *b_pEF_eta;
  TBranch *b_pEF_phi;
  TBranch *b_pEF_dR;
  TBranch *b_sumReqdREF;
  TBranch *b_pEF_pass;
  TBranch *b_pEFTAG_pass;

  //histgram
  //Standard
  vector<TH1D*> m_h_poff_pt;
  vector<TH1D*> m_h_pL1_pt;
  vector<TH1D*> m_h_pSA_pt;
  vector<TH1D*> m_h_pCB_pt;
  vector<TH1D*> m_h_pEF_pt;
  vector<TH1D*> m_h_pL1_dR;
  vector<TH1D*> m_h_pSA_dR;
  vector<TH1D*> m_h_pCB_dR;
  vector<TH1D*> m_h_pEF_dR;
  vector<TH1D*> m_h_textL1_dR;
  vector<TH1D*> m_h_textSA_dR;
  vector<TH1D*> m_h_textCB_dR;
  vector<TH1D*> m_h_textEF_dR;
  vector<TH1D*> m_h_pextL1_dR;
  vector<TH1D*> m_h_pextSA_dR;
  vector<TH1D*> m_h_pextCB_dR;
  vector<TH1D*> m_h_pextEF_dR;
  vector<TH2F*> m_h_poffvsSA_pt;
  vector<TH2F*> m_h_offphivsSA_sAddress;
  vector<TH2F*> m_h_offphivsSAphims;
  TH1D *m_h_offphi_LargeSpecial;
  TH1D *m_h_saphims_LargeSpecial;
  TH1D *m_h_saroiphi_LargeSpecial;
  TH1D *m_h_saroiphi_SmallSpecial;
  vector<TH2F*> m_h_rpchitXY;
  vector<TH2F*> m_h_rpchitXYLargeSpecial;
  vector<TH2F*> m_h_rpchitXYLargeSpecialplus11out;
  vector<TH2F*> m_h_rpchitXYLargeSpecialplus11in;
  vector<TH2F*> m_h_rpchitXYLargeSpecialplus15out;
  vector<TH2F*> m_h_rpchitXYLargeSpecialplus15in;
  vector<TH2F*> m_h_rpchitXYLargeSpecialminus11out;
  vector<TH2F*> m_h_rpchitXYLargeSpecialminus11in;
  vector<TH2F*> m_h_rpchitXYLargeSpecialminus15out;
  vector<TH2F*> m_h_rpchitXYLargeSpecialminus15in;
  vector<TH2F*> m_h_mdthitXY;
  vector<TH2F*> m_h_mdthitXYLargeSpecial;
  vector<TH2F*> m_h_mdthitXYLargeSpecialplus11out;
  vector<TH2F*> m_h_mdthitXYLargeSpecialplus11in;
  vector<TH2F*> m_h_mdthitXYLargeSpecialplus15out;
  vector<TH2F*> m_h_mdthitXYLargeSpecialplus15in;
  vector<TH2F*> m_h_mdthitXYLargeSpecialminus11out;
  vector<TH2F*> m_h_mdthitXYLargeSpecialminus11in;
  vector<TH2F*> m_h_mdthitXYLargeSpecialminus15out;
  vector<TH2F*> m_h_mdthitXYLargeSpecialminus15in;

  //Efficiency
  vector<TH1D*> m_h_eoff_pt;
  vector<TH1D*> m_h_eL1_pt;
  vector<TH1D*> m_h_eSA_pt;
  vector<TH1D*> m_h_eCB_pt;
  vector<TH1D*> m_h_eEF_pt;
  vector<TH1D*> m_h_eoff_eta;
  vector<TH1D*> m_h_eL1_eta;
  vector<TH1D*> m_h_eSA_eta;
  vector<TH1D*> m_h_eCB_eta;
  vector<TH1D*> m_h_eEF_eta;
  vector<TH1D*> m_h_eoff_pt_barrel;
  vector<TH1D*> m_h_eL1_pt_barrel;
  vector<TH1D*> m_h_eSA_pt_barrel;
  vector<TH1D*> m_h_eCB_pt_barrel;
  vector<TH1D*> m_h_eEF_pt_barrel;
  vector<TH1D*> m_h_eoff_pt_end;
  vector<TH1D*> m_h_eL1_pt_end;
  vector<TH1D*> m_h_eSA_pt_end;
  vector<TH1D*> m_h_eCB_pt_end;
  vector<TH1D*> m_h_eEF_pt_end;
  vector<TH1D*> m_h_eoff_pt_Largeplus;
  vector<TH1D*> m_h_eL1_pt_Largeplus;
  vector<TH1D*> m_h_eSA_pt_Largeplus;
  vector<TH1D*> m_h_eoff_pt_Largeminus;
  vector<TH1D*> m_h_eL1_pt_Largeminus;
  vector<TH1D*> m_h_eSA_pt_Largeminus;
  vector<TH1D*> m_h_eoff_pt_LargeSpecialplus;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialplus;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialplus;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialplus11;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialplus11;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialplus15;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialplus15;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialplus11in;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialplus11in;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialplus11out;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialplus11out;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialplus15out;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialplus15out;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialplus15in;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialplus15in;
  vector<TH1D*> m_h_eoff_pt_LargeSpecialminus;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialminus;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialminus;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialminus11;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialminus11;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialminus15;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialminus15;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialminus11in;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialminus11in;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialminus11out;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialminus11out;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialminus15out;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialminus15out;
  vector<TH1D*> m_h_eL1_pt_LargeSpecialminus15in;
  vector<TH1D*> m_h_eSA_pt_LargeSpecialminus15in;
  vector<TH1D*> m_h_eoff_pt_Smallplus;
  vector<TH1D*> m_h_eL1_pt_Smallplus;
  vector<TH1D*> m_h_eSA_pt_Smallplus;
  vector<TH1D*> m_h_eoff_pt_Smallminus;
  vector<TH1D*> m_h_eL1_pt_Smallminus;
  vector<TH1D*> m_h_eSA_pt_Smallminus;
  vector<TH1D*> m_h_eoff_pt_SmallSpecialplus;
  vector<TH1D*> m_h_eL1_pt_SmallSpecialplus;
  vector<TH1D*> m_h_eSA_pt_SmallSpecialplus;
  vector<TH1D*> m_h_eoff_pt_SmallSpecialminus;
  vector<TH1D*> m_h_eL1_pt_SmallSpecialminus;
  vector<TH1D*> m_h_eSA_pt_SmallSpecialminus;
  vector<TH2F*> m_h_eff_poff_etaphi;
  vector<TH2F*> m_h_eff_pL1_etaphi;
  vector<TH2F*> m_h_eff_pSA_etaphi;

  //Residual
  vector<TH1D*> m_h_pSA_respt;
  vector<TH1D*> m_h_pCB_respt;
  vector<TH1D*> m_h_pEF_respt;
  vector<TH1D*> m_h_SA_resptLargeplus;
  vector<TH1D*> m_h_SA_resptLargeSpecialplus;
  vector<TH1D*> m_h_SA_resptSmallplus;
  vector<TH1D*> m_h_SA_resptSmallSpecialplus;
  vector<TH1D*> m_h_SA_resptLargeminus;
  vector<TH1D*> m_h_SA_resptLargeSpecialminus;
  vector<TH1D*> m_h_SA_resptSmallminus;
  vector<TH1D*> m_h_SA_resptSmallSpecialminus;
  vector<TH1D*> m_h_SA_resptLargeSpecialplus11out;
  vector<TH1D*> m_h_SA_resptLargeSpecialplus11in;
  vector<TH1D*> m_h_SA_resptLargeSpecialplus15out;
  vector<TH1D*> m_h_SA_resptLargeSpecialplus15in;
  vector<TH1D*> m_h_SA_resptLargeSpecialminus11out;
  vector<TH1D*> m_h_SA_resptLargeSpecialminus11in;
  vector<TH1D*> m_h_SA_resptLargeSpecialminus15out;
  vector<TH1D*> m_h_SA_resptLargeSpecialminus15in;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeplus;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialplus;
  vector<TH2F*> m_h_off_ptvsSA_resptSmallplus;
  vector<TH2F*> m_h_off_ptvsSA_resptSmallSpecialplus;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeminus;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialminus;
  vector<TH2F*> m_h_off_ptvsSA_resptSmallminus;
  vector<TH2F*> m_h_off_ptvsSA_resptSmallSpecialminus;
  vector<TH2F*> m_h_offphivsSA_resptLargeplus;
  vector<TH2F*> m_h_offphivsSA_resptLargeSpecialplus;
  vector<TH2F*> m_h_offphivsSA_resptSmallplus;
  vector<TH2F*> m_h_offphivsSA_resptSmallSpecialplus;
  vector<TH2F*> m_h_offphivsSA_resptLargeminus;
  vector<TH2F*> m_h_offphivsSA_resptLargeSpecialminus;
  vector<TH2F*> m_h_offphivsSA_resptSmallminus;
  vector<TH2F*> m_h_offphivsSA_resptSmallSpecialminus;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialplus15out;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialplus15in;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialplus11out;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialplus11in;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialminus15out;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialminus15in;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialminus11out;
  vector<TH2F*> m_h_off_ptvsSA_resptLargeSpecialminus11in;
  vector<TH2F*> m_h_offetavsSA_resptLargeplus;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialplus;
  vector<TH2F*> m_h_offetavsSA_resptSmallplus;
  vector<TH2F*> m_h_offetavsSA_resptSmallSpecialplus;
  vector<TH2F*> m_h_offetavsSA_resptLargeminus;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialminus;
  vector<TH2F*> m_h_offetavsSA_resptSmallminus;
  vector<TH2F*> m_h_offetavsSA_resptSmallSpecialminus;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialplus11out;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialplus11in;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialplus15out;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialplus15in;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialminus11out;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialminus11in;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialminus15out;
  vector<TH2F*> m_h_offetavsSA_resptLargeSpecialminus15in;
  vector<TH2F*> m_h_highoffetavsSA_resptLargeSpecialplus11out;
  vector<TH2F*> m_h_highoffetavsSA_resptLargeSpecialplus11in;
  vector<TH2F*> m_h_highoffetavsSA_resptLargeSpecialplus15out;
  vector<TH2F*> m_h_highoffetavsSA_resptLargeSpecialplus15in;
  vector<TH2F*> m_h_highoffetavsSA_resptLargeSpecialminus11out;
  vector<TH2F*> m_h_highoffetavsSA_resptLargeSpecialminus11in;
  vector<TH2F*> m_h_highoffetavsSA_resptLargeSpecialminus15out;
  vector<TH2F*> m_h_highoffetavsSA_resptLargeSpecialminus15in;
  vector<TH2F*> m_h_etaIndexvsSA_respt;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeplus;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialplus;
  vector<TH2F*> m_h_etaIndexvsSA_resptSmallplus;
  vector<TH2F*> m_h_etaIndexvsSA_resptSmallSpecialplus;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeminus;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialminus;
  vector<TH2F*> m_h_etaIndexvsSA_resptSmallminus;
  vector<TH2F*> m_h_etaIndexvsSA_resptSmallSpecialminus;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialplus11out;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialplus11in;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialplus15out;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialplus15in;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialminus11out;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialminus11in;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialminus15out;
  vector<TH2F*> m_h_etaIndexvsSA_resptLargeSpecialminus15in;

  Int_t m_nbin_eta,m_nbin_phi;
  Double_t m_eta_max,m_phi_max,m_reqL1dR;
  std::string m_method_name;
  Int_t m_nhist;
  Int_t m_thpitch;
  Int_t m_proc;

  Double_t m_binmax;
  Double_t m_efficiency_xerr;

  vector<Int_t> m_countLarge;
  vector<Int_t> m_countLargeSpecial;
  vector<Int_t> m_countSmall;
  vector<Int_t> m_countSmallSpecial;

public:
  void Init(TTree *tree,std::string name,const Int_t np,const Int_t ne,const Double_t mp,const Double_t me,Double_t req,Int_t max,Double_t err,const Int_t nh,const Int_t th,Int_t proc);
  bool Dicision_barrel(Double_t eta);
  bool Cut_tagprobe(Int_t pass);
  bool Cut_L1(Int_t pass);
  bool Cut_SA(Int_t pass,Double_t pt,Double_t th);
  bool Cut_CB(Int_t pass);
  bool Cut_EF(Int_t pass);
  void Execute(Int_t ev);
  void Finalize(TFile *tf1);

};


#endif//Efficiency_chh
