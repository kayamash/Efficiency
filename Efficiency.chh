#ifndef EFFICIENCY_CHH
#define EFFICIENCY_CHH

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <TH1.h>
#include <TH2.h>
#include <TCanvas.h>
#include <stdio.h>
#include <math.h>
#include <cmath>
#include <iostream>
#include <fstream>
#include <sys/stat.h>
#include <sys/types.h>
#include <string>
#include <sstream>
#include <TF1.h>
#include <TTree.h>
#include <TStyle.h>
#include <TText.h>
#include <TGraphErrors.h>
#include <TLegend.h>
#include <vector>
#include <TMath.h>
#include <TBranch.h>
#include <TObject.h>
#include <TChain.h>

class Efficiency
 {
  //variable
  private:
  //for tree
  TTree *tChain;
  Double_t m_toff_pt;
  Double_t m_toff_eta;
  Double_t m_toff_exteta;
  Double_t m_toff_extinneta;
  Double_t m_toff_phi;
  Double_t m_toff_extphi;
  Double_t m_toff_extinnphi;
  Double_t m_tag_charge;
  Double_t m_tag_d0,m_tag_z0;
  Double_t m_poff_pt;
  Double_t m_poff_eta;
  Double_t m_poff_exteta;
  Double_t m_poff_extinneta;
  Double_t m_poff_phi;
  Double_t m_poff_extphi;
  Double_t m_poff_extinnphi;
  Double_t m_probe_charge;
  Double_t m_probe_d0;
  Double_t m_probe_z0;
  Double_t m_tL1_pt;
  Double_t m_tL1_eta;
  Double_t m_tL1_phi;
  Double_t m_tSA_pt;
  Double_t m_tSA_eta;
  Double_t m_tSA_phi;
  Double_t m_tCB_pt;
  Double_t m_tCB_eta;
  Double_t m_tCB_phi;
  Double_t m_tEF_pt;
  Double_t m_tEF_eta;
  Double_t m_tEF_phi;
  Double_t m_tp_extdR;
  Double_t m_sumReqdRL1;
  Double_t m_sumReqdREF;
  Double_t m_tp_dR;

  std::vector<std::string> *m_mes_name;
  std::vector<Double_t> *m_pL1_pt;
  std::vector<Double_t> *m_pL1_eta;
  std::vector<Double_t> *m_pL1_phi;
  std::vector<Double_t> *m_pL1_dR;
  std::vector<Double_t> *m_pSA_pt;
  std::vector<Double_t> *m_pSA_eta;
  std::vector<Double_t> *m_pSA_phi;
  std::vector<Double_t> *m_pSA_dR;
  std::vector<Double_t> *m_pSA_sAddress;
  std::vector<Double_t> *m_pCB_pt;
  std::vector<Double_t> *m_pCB_eta;
  std::vector<Double_t> *m_pCB_phi;
  std::vector<Double_t> *m_pCB_dR;
  std::vector<Double_t> *m_pEF_pt;
  std::vector<Double_t> *m_pEF_eta;
  std::vector<Double_t> *m_pEF_phi;
  std::vector<Double_t> *m_pEF_dR;
  std::vector<Double_t> *m_pSA_phims;
  std::vector<float> *m_pSA_roiphi;
  std::vector<Int_t> *m_pL1_pass;
  std::vector<Int_t> *m_pSA_pass;
  std::vector<Int_t> *m_pCB_pass;
  std::vector<Int_t> *m_pEF_pass;
  std::vector<Int_t> *m_pEFTAG_pass;

  TBranch *b_tag_pt;
  TBranch *b_tag_eta;
  TBranch *b_tag_exteta;
  TBranch *b_tag_extinneta;
  TBranch *b_tag_phi;
  TBranch *b_tag_extphi;
  TBranch *b_tag_extinnphi;
  TBranch *b_tag_charge;
  TBranch *b_tag_d0;
  TBranch *b_tag_z0;
  TBranch *b_probe_pt;
  TBranch *b_probe_eta;
  TBranch *b_probe_exteta;
  TBranch *b_probe_extinneta;
  TBranch *b_probe_phi;
  TBranch *b_probe_extphi;
  TBranch *b_probe_extinnphi;
  TBranch *b_probe_charge;
  TBranch *b_probe_d0;
  TBranch *b_probe_z0;
  TBranch *b_tL1_pt;
  TBranch *b_tL1_eta;
  TBranch *b_tL1_phi;
  TBranch *b_tSA_pt;
  TBranch *b_tSA_eta;
  TBranch *b_tSA_phi;
  TBranch *b_tCB_pt;
  TBranch *b_tCB_eta;
  TBranch *b_tCB_phi;
  TBranch *b_tEF_pt;
  TBranch *b_tEF_eta;
  TBranch *b_tEF_phi;
  TBranch *b_mes_name;
  TBranch *b_pL1_pt;
  TBranch *b_pL1_eta;
  TBranch *b_pL1_phi;
  TBranch *b_pL1_dR;;
  TBranch *b_pSA_pt;
  TBranch *b_pSA_eta;
  TBranch *b_pSA_phi;
  TBranch *b_pSA_dR;
  TBranch *b_pSA_sAddress;
  TBranch *b_pSA_phims;
  TBranch *b_pSA_roiphi;
  TBranch *b_pCB_pt;
  TBranch *b_pCB_eta;
  TBranch *b_pCB_phi;
  TBranch *b_pCB_dR;
  TBranch *b_pEF_pt;
  TBranch *b_pEF_eta;
  TBranch *b_pEF_phi;
  TBranch *b_pEF_dR;
  TBranch *b_pL1_pass;
  TBranch *b_pSA_pass;
  TBranch *b_pCB_pass;
  TBranch *b_pEF_pass;
  TBranch *b_pEFTAG_pass;
  TBranch *b_tp_extdR;
  TBranch *b_sumReqdRL1;
  TBranch *b_sumReqdREF;
  TBranch *b_tp_dR;

  //histgram
  vector<TH1D*> m_h_poff_pt;
  vector<TH1D*> m_h_pL1_pt;
  vector<TH1D*> m_h_pSA_pt;
  vector<TH1D*> m_h_pCB_pt;
  vector<TH1D*> m_h_pEF_pt;
  vector<TH1D*> m_h_pL1_dR;
  vector<TH1D*> m_h_pSA_dR;
  vector<TH1D*> m_h_pCB_dR;
  vector<TH1D*> m_h_pEF_dR;
  vector<TH1D*> m_h_textL1_dR;
  vector<TH1D*> m_h_textSA_dR;
  vector<TH1D*> m_h_textCB_dR;
  vector<TH1D*> m_h_textEF_dR;
  vector<TH1D*> m_h_pextL1_dR;
  vector<TH1D*> m_h_pextSA_dR;
  vector<TH1D*> m_h_pextCB_dR;
  vector<TH1D*> m_h_pextEF_dR;
  vector<TH1D*> m_h_pSA_respt;
  vector<TH1D*> m_h_pCB_respt;
  vector<TH1D*> m_h_pEF_respt;
  vector<TH1D*> m_h_eoff_pt;
  vector<TH1D*> m_h_eL1_pt;
  vector<TH1D*> m_h_eSA_pt;
  vector<TH1D*> m_h_eCB_pt;
  vector<TH1D*> m_h_eEF_pt;
  vector<TH1D*> m_h_eoff_eta;
  vector<TH1D*> m_h_eL1_eta;
  vector<TH1D*> m_h_eSA_eta;
  vector<TH1D*> m_h_eCB_eta;
  vector<TH1D*> m_h_eEF_eta;
  vector<TH1D*> m_h_eoff_pt_barrel;
  vector<TH1D*> m_h_eL1_pt_barrel;
  vector<TH1D*> m_h_eSA_pt_barrel;
  vector<TH1D*> m_h_eCB_pt_barrel;
  vector<TH1D*> m_h_eEF_pt_barrel;
  vector<TH1D*> m_h_eoff_pt_end;
  vector<TH1D*> m_h_eL1_pt_end;
  vector<TH1D*> m_h_eSA_pt_end;
  vector<TH1D*> m_h_eCB_pt_end;
  vector<TH1D*> m_h_eEF_pt_end;
  vector<TH1D*> m_h_SA_respt0;
  vector<TH1D*> m_h_SA_respt1;
  vector<TH1D*> m_h_SA_respt2;
  vector<TH1D*> m_h_SA_respt3;
  vector<TH1D*> m_h_eoff_pt_Large;
  vector<TH1D*> m_h_eL1_pt_Large;
  vector<TH1D*> m_h_eSA_pt_Large;
  vector<TH1D*> m_h_eoff_pt_LargeSpecial;
  vector<TH1D*> m_h_eL1_pt_LargeSpecial;
  vector<TH1D*> m_h_eSA_pt_LargeSpecial;
  vector<TH1D*> m_h_SA_resptplus11;
  vector<TH1D*> m_h_SA_resptminus11;
  vector<TH1D*> m_h_SA_resptplus15;
  vector<TH1D*> m_h_SA_resptminus15;
  //
  vector<TH1D*> m_h_eL1_pt_LargeSpecial11;//!
  vector<TH1D*> m_h_eSA_pt_LargeSpecial11;//!
  vector<TH1D*> m_h_eL1_pt_LargeSpecial15;//!
  vector<TH1D*> m_h_eSA_pt_LargeSpecial15;//!
  vector<TH1D*> m_h_eL1_pt_LargeSpecialplus11;//!
  vector<TH1D*> m_h_eSA_pt_LargeSpecialplus11;//!
  vector<TH1D*> m_h_eL1_pt_LargeSpecialminus11;//!
  vector<TH1D*> m_h_eSA_pt_LargeSpecialminus11;//!
  vector<TH1D*> m_h_eL1_pt_LargeSpecialplus15;//!
  vector<TH1D*> m_h_eSA_pt_LargeSpecialplus15;//!
  vector<TH1D*> m_h_eL1_pt_LargeSpecialminus15;//!
  vector<TH1D*> m_h_eSA_pt_LargeSpecialminus15;//!
  //
  vector<TH1D*> m_h_eoff_pt_Small;
  vector<TH1D*> m_h_eL1_pt_Small;
  vector<TH1D*> m_h_eSA_pt_Small;
  vector<TH1D*> m_h_eoff_pt_SmallSpecial;
  vector<TH1D*> m_h_eL1_pt_SmallSpecial;
  vector<TH1D*> m_h_eSA_pt_SmallSpecial;
  TH1D *m_h_offphi_LargeSpecial;
  TH1D *m_h_saphims_LargeSpecial;
  TH1D *m_h_saroiphi_LargeSpecial;
  TH1D *m_h_saroiphi_SmallSpecial;

  vector<TH2F*> m_h_eff_poff_etaphi;
  vector<TH2F*> m_h_eff_pL1_etaphi;
  vector<TH2F*> m_h_eff_pSA_etaphi;
  vector<TH2F*> m_h_poffvsSA_pt;
  vector<TH2F*> m_h_off_ptvsSA_resptplus0;
  vector<TH2F*> m_h_off_ptvsSA_resptplus1;
  vector<TH2F*> m_h_off_ptvsSA_resptplus2;
  vector<TH2F*> m_h_off_ptvsSA_resptplus3;
  vector<TH2F*> m_h_off_ptvsSA_resptminus0;
  vector<TH2F*> m_h_off_ptvsSA_resptminus1;
  vector<TH2F*> m_h_off_ptvsSA_resptminus2;
  vector<TH2F*> m_h_off_ptvsSA_resptminus3;
  vector<TH2F*> m_h_offphivsSA_sAddress;
  vector<TH2F*> m_h_offphivsSA_respt;
  vector<TH2F*> m_h_offphivsSA_respt0;
  vector<TH2F*> m_h_offphivsSA_respt1;
  vector<TH2F*> m_h_offphivsSA_respt2;
  vector<TH2F*> m_h_offphivsSA_respt3;
  vector<TH2F*> m_h_offphivsSAphims;
  //
  vector<TH2F*> m_h_off_ptvsSA_resptplusLS11;
  vector<TH2F*> m_h_off_ptvsSA_resptplusLS15;
  vector<TH2F*> m_h_off_ptvsSA_resptplusLSplus11;
  vector<TH2F*> m_h_off_ptvsSA_resptplusLSminus11;
  vector<TH2F*> m_h_off_ptvsSA_resptplusLSplus15;
  vector<TH2F*> m_h_off_ptvsSA_resptplusLSminus15;
  vector<TH2F*> m_h_off_ptvsSA_resptminusLS11;
  vector<TH2F*> m_h_off_ptvsSA_resptminusLS15;
  vector<TH2F*> m_h_off_ptvsSA_resptminusLSplus11;
  vector<TH2F*> m_h_off_ptvsSA_resptminusLSminus11;
  vector<TH2F*> m_h_off_ptvsSA_resptminusLSplus15;
  vector<TH2F*> m_h_off_ptvsSA_resptminusLSminus15;
  //
  vector<TH2F*> m_h_offetavsSA_respt0;//
  vector<TH2F*> m_h_offetavsSA_respt1;//
  vector<TH2F*> m_h_offetavsSA_respt2;//
  vector<TH2F*> m_h_offetavsSA_respt3;//
  vector<TH2F*> m_h_offetavsSA_resptLS11+;//
  vector<TH2F*> m_h_offetavsSA_resptLS11-;//
  vector<TH2F*> m_h_offetavsSA_resptLS15+;//
  vector<TH2F*> m_h_offetavsSA_resptLS15-;//
  vector<TH2F*> m_h_highoffetavsSA_resptLS11+;//
  vector<TH2F*> m_h_highoffetavsSA_resptLS11-;//
  vector<TH2F*> m_h_highoffetavsSA_resptLS15+;//
  vector<TH2F*> m_h_highoffetavsSA_resptLS15-;//
  vector<TH2F*> m_h_highoffphivsSA_resptLS11+;//
  vector<TH2F*> m_h_highoffphivsSA_resptLS11-;//
  vector<TH2F*> m_h_highoffphivsSA_resptLS15+;//
  vector<TH2F*> m_h_highoffphivsSA_resptLS15-;//

  Int_t m_nbin_eta,m_nbin_phi;
  Double_t m_eta_max,m_phi_max,m_reqL1dR;
  std::string m_method_name;
  Int_t m_nhist;
  Int_t m_thpitch;

  Double_t m_binmax;
  Double_t m_efficiency_xerr;

  vector<Int_t> m_countLarge;
  vector<Int_t> m_countLargeSpecial;
  vector<Int_t> m_countSmall;
  vector<Int_t> m_countSmallSpecial;
  Int_t m_countall;
  Int_t m_countoff;
  Int_t m_countL1;
  Int_t m_countSA;
  Int_t m_countCB;
  Int_t m_countEF;
  Int_t m_count;

public:
  void Init(TTree *tree,std::string name,const Int_t np,const Int_t ne,const Double_t mp,const Double_t me,Double_t req,Int_t max,Double_t err,const Int_t nh,const Int_t th);
  bool Dicision_barrel(Double_t eta);
  bool Cut_tagprobe(Int_t pass);
  bool Cut_L1(Int_t pass);
  bool Cut_SA(Int_t pass,Double_t pt,Double_t th);
  bool Cut_CB(Int_t pass);
  bool Cut_EF(Int_t pass);
  void Execute(Int_t ev);
  void Finalize(TFile *tf1);

};


#endif//Efficiency_chh
